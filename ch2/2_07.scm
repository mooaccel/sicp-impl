(define (make-interval a b) 
  (cons a b))
(define (lower-bound interval)
  (car interval))
(define (upper-bound interval)
  (cdr interval))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y)) 
                 (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y) 
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y))) 
        (p3 (* (upper-bound x) (lower-bound y))) 
        (p4 (* (upper-bound x) (upper-bound y)))) 
    (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))))
(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y)) 
                               (/ 1.0 (lower-bound y)))))
(define (print-interval interval) 
  (newline) 
  (display "(") 
  (display (lower-bound interval)) 
  (display ",")
  (display (upper-bound interval)) 
  (display ")"))
(define interval1 (make-interval 6.12 7.48))
(define interval2 (make-interval 4.465 4.935))
(define interval-one (make-interval 1.0 1.0))
(define parallel-conn-res (div-interval interval-one
                                        (add-interval (div-interval interval-one interval1)
                                                      (div-interval interval-one interval2))))
(print-interval parallel-conn-res)
