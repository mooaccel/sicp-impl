(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

(define (make-segment point-start point-end)
  (cons point-start point-end))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))

;(define (print-point p) 
;        (newline) 
;        (display "(") 
;        (display (x-point p)) 
;        (display ",") 
;        (display (y-point p)) 
;        (display ")"))
(define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))

(define (compute-mid-point segment)
  (define (average x y)
      (/ (+ x y) 2.0))
  (let ((start-point (start-segment segment))
        (end-point (end-segment segment)))
      (let ((x1 (x-point start-point))
            (x2 (x-point end-point))
            (y1 (y-point start-point))
            (y2 (y-point end-point)))
          (make-point (average x1 x2)
                      (average y1 y2)))))

(define point-1 (make-point 12 25))
(define point-2 (make-point 10 100))
;(define segment (make-segment point-1 point-2))
;(define mid-point (compute-mid-point segment))
;(print-point mid-point)
(print-point (compute-mid-point (make-segment point-1 point-2)))
;(print-point point-1)
;(print-point point-2)
;(define segment (make-segment point-1 point-2))
;(define mid-point (compute-mid-point segment))